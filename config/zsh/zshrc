# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="simple"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )
ZSH_DISABLE_COMPFIX=true

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git vi-mode)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
#######################
# Azure Settings
#######################
#autoload bashcompinit && bashcompinit
#source $(brew --prefix)/etc/bash_completion.d/az
#######################

#echo 'vmx.fullpath = "/bin/vmx"' >> /etc/vmware/config
#echo 'isolation.tools.copy.disable="FALSE"' >> /etc/vmware/config
#echo 'isolation.tools.paste.disable="FALSE"' >> /etc/vmware/config

# custom_reverse_search_deduped() {
#     # Temporarily set the history file to the deduplicated history file
#     local original_histfile="$HISTFILE"
#     HISTFILE=~/.zsh_deduped_history
#
#     # Ensure the deduplicated history file is loaded
#     fc -R "$HISTFILE"
#
#     # Start reverse search on the deduplicated history
#     zle history-incremental-search-backward
#
#     # Restore the original history file after the search
#     HISTFILE="$original_histfile"
#     fc -R "$HISTFILE"
# }
#
# zle -N custom_reverse_search_deduped
#
# bindkey '^K' custom_reverse_search_deduped
#
# save_commands() {
#     local deduped_file=~/.zsh_deduped_history
#     echo "$*" >> "$deduped_file"
#     # Deduplicate the file to avoid repeated commands
#     awk '!seen[$0]++' "$deduped_file" > "${deduped_file}.tmp" && mv "${deduped_file}.tmp" "$deduped_file"
#     echo "Command saved and deduplicated in $deduped_file."
# }
#
set_target() {
    echo "$1" > ~/.target_ip
    echo "Target IP updated to $1"
}

get_target(){
    export TARGET=$(cat ~/.target_ip)
    echo "$TARGET"
}
# comment this out in mac
pbcopy() {
    xclip -selection clipboard "$@"
}

get_tunny() {
    export TUNIP=$(ip -o -4 addr show tun0 | awk '{print $4}' | cut -d/ -f1)
    echo "$TUNIP"
}


# Source the aliases file
[ -f "${HOME}/.aliases" ] && source "${HOME}/.aliases"
[ -f "${HOME}/.work_only" ] && source "${HOME}/.work_only"
[ -f "${HOME}/.exports" ] && source "${HOME}/.exports"

PROMPT='%{$fg[yellow]%}[%D{%m/%f/%y} %D{%L:%M:%S}] '$PROMPT
#eval "$(ssh-agent -s)"
#eval "$(pyenv init --path)"
#eval "$(pyenv init -)"
#eval "$(pyenv virtualenv-init -)"
export EDITOR=vim

get_target > /dev/null
get_tunny > /dev/null
